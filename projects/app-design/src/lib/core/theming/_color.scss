@use 'sass:map';
@use 'sass:meta';

/// For a given hue in a palette, return the contrast color from the map of contrast palettes.
/// @param {Map} $palette The palette from which to extract a color.
/// @param {String | Number} $hue The hue for which to get a contrast color.
/// @returns {Color} The contrast color for the given palette and hue.
@function get-contrast-color-from-palette($palette, $hue) {
  @return map.get($palette, contrast, $hue);
}

/// Gets a color from a theme color scheme.
/// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured
/// hues (default, lighter, darker), or any of the aforementioned prefixed with "-contrast".
///
/// @param {Map} $palette The palette from which to extract a color.
/// @param {String | Number} $hue The hue from the palette to use. If this is a value between 0
//     and 1, it will be treated as opacity.
/// @param {Number} $opacity The alpha channel value for the color.
/// @returns {Color} The color for the given palette, hue, and opacity.
@function get-from-color-scheme($palette, $hue: default, $opacity: null) {
  // If hueKey is a number between zero and one, then it actually contains an
  // opacity value, so recall this function with the default hue and that given opacity.
  @if meta.type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return get-from-color-scheme($palette, default, $hue);
  }

  // We cast the $hue to a string, because some hues starting with a number, like `700-contrast`,
  // might be inferred as numbers by Sass. Casting them to string fixes the map lookup.
  $color: if(
    map.has-key($palette, $hue),
    map.get($palette, $hue),
    map.get($palette, $hue + '')
  );

  @if (meta.type-of($color) != color) {
    // If the $color resolved to something different from a color (e.g. a CSS variable),
    // we can't apply the opacity anyway so we return the value as is, otherwise Sass can
    // throw an error or output something invalid.
    @return $color;
  }

  @return rgba($color, if($opacity == null, opacity($color), $opacity));
}

/// Creates a color scheme for a theme.
///
/// @param {Map} $base-palette Map of hue keys to color values for the basis for this palette.
/// @param {String | Number} $default Default hue for this palette.
/// @param {String | Number} $lighter "lighter" hue for this palette.
/// @param {String | Number} $darker "darker" hue for this palette.
/// @param {String | Number} $text "text" hue for this palette.
/// @returns {Map} A color scheme.
@function define-color-scheme(
  $base-palette,
  $default: 500,
  $lighter: 100,
  $darker: 700,
  $text: $default
) {
  $result: map.merge(
    $base-palette,
    (
      default: map.get($base-palette, $default),
      lighter: map.get($base-palette, $lighter),
      darker: map.get($base-palette, $darker),
      text: map.get($base-palette, $text),
      default-contrast: get-contrast-color-from-palette($base-palette, $default),
      lighter-contrast: get-contrast-color-from-palette($base-palette, $lighter),
      darker-contrast: get-contrast-color-from-palette($base-palette, $darker),
    )
  );

  // For each hue in the palette, add a "-contrast" color to the map.
  @each $hue, $color in $base-palette {
    $result: map.merge(
      $result,
      (
        '#{$hue}-contrast':
          get-contrast-color-from-palette($base-palette, $hue),
      )
    );
  }

  @return $result;
}

@mixin property-from-hue(
  $color-config,
  $property,
  $hue: default,
  $opacity: null
) {
  $colors: primary, accent, warn;
  @each $color in $colors {
    &.ckad-color-#{$color} {
      $palette: map.get($color-config, $color);
      #{$property}: get-from-color-scheme($palette, $hue, $opacity);
    }
  }
}
